---
import styles from "./header.module.css";
import classNames from "classnames";

interface Props {
  docs?: string;
}
const { docs } = Astro.props;

const pathname = Astro.url.pathname;
const notRikuHome = pathname.split("/").length > 2;
---

<div class={classNames(styles.wrapper)}>
  <header class={classNames(styles.header)}>
    <div class={styles.nav_first}>
      <div>
        <button
          class={classNames(styles.logo)}
          style={notRikuHome ? "cursor:pointer" : "cursor:default"}
        >
          {
            notRikuHome ? (
              <a href="/riku" rel="prefetch">
                <span
                  class={classNames(
                    styles.button_content,
                    styles.button_center
                  )}
                >
                  riku
                  <span style="font-weight: 500;transform: scale(0.6) scaleX(1.25);color:#fff;position:absolute;bottom:4px;right:-37.5px;">
                    .JS
                  </span>
                </span>
              </a>
            ) : (
              <span
                class={classNames(styles.button_content, styles.button_center)}
              >
                riku
                <span style="font-weight: 500;transform: scale(0.6) scaleX(1.25);color:#fff;position:absolute;bottom:4px;right:-37.5px;">
                  .JS
                </span>
              </span>
            )
          }
        </button>
        {
          docs && (
            <div style="float:right;" class={styles.docs}>
              {docs}
            </div>
          )
        }
      </div>
    </div>
    <div class={classNames(styles.nav_second)}>
      <ul class={classNames(styles.nav, styles.left, styles.visible)}>
        {
          /* <li>
              <Link
                to={"/riku/docs"}
                class={styles.link_padding}
                secondary={true}
              >
                Docs
              </Link>
            </li> */
        }
        <div id="clockbox" class={styles.clockbox}></div>
        <script is:inline>
          var tday = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ];
          var tmonth = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ];

          function GetClock() {
            var d = new Date();
            var nday = d.getDay(),
              nmonth = d.getMonth(),
              ndate = d.getDate();
            var nhour = d.getHours(),
              nmin = d.getMinutes(),
              nsec = d.getSeconds(),
              ap;

            if (nhour == 0) {
              ap = " AM";
              nhour = 12;
            } else if (nhour < 12) {
              ap = " AM";
            } else if (nhour == 12) {
              ap = " PM";
            } else if (nhour > 12) {
              ap = " PM";
              nhour -= 12;
            }

            if (nmin <= 9) nmin = "0" + nmin;
            if (nsec <= 9) nsec = "0" + nsec;

            var clocktext =
              "" +
              tday[nday] +
              ", " +
              tmonth[nmonth] +
              " " +
              ndate +
              " " +
              nhour +
              ":" +
              nmin +
              ":" +
              nsec +
              ap +
              "";
            document.getElementById("clockbox").innerHTML = clocktext;
          }

          GetClock();
          setInterval(GetClock, 1000);
        </script>
      </ul>
    </div>
    <div
      class={classNames(styles.nav_third, "visually-hidden")}
      style={{ opacity: 0, pointerEvents: "none" }}
    >
    </div>
  </header>
</div>
